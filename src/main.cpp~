#include "../include/rtweekend.h"

#include "../include/hittable_list.h"
#include "../include/sphere.h"

#include<ctime>


double hit_sphere(vec3 center,float radius,ray **r)
{
  ray *ra = *r;
  vec3 oc = (ra->origin()) - center;
  float a = dot(ra->direction(),ra->direction());
  float b = 2 * dot(ra->direction(),oc);
  float c = dot(oc,oc) - (radius * radius);

  float discriminant = b*b - 4*a*c;

  if(discriminant < 0)
    {
      return -1;
    }
  else
    {
      return (-b - sqrt(discriminant))/2 * a ;
    }
  
    
}
vec3 ray_color(ray *r,hittable_list *world,int max_depth)
{
  hit_record h_rec;

  if(max_depth <=0)
    {
      return vec3(0,0,0);
    }
  if(world->hit(r,0.001,infinity,&h_rec))
    {
      vec3 target = h_rec.p+ h_rec.normal + random_in_hemisphere(h_rec.normal);
      ray rr(h_rec.p, target - h_rec.p);
      return 0.5 * ray_color(&rr,world,max_depth-1);
    }
  vec3 unit_direction = unit_vector(r->direction());
  float t = 0.5 * (unit_direction.y() + 1.0);

  return (1.0 - t)* vec3(1.0,1.0,1.0) + t * vec3(0.2,0.4,1.0);
}
int main()
{

  //setting time

  clock_t begin = clock();
  //setting up the camera

  //image
  const float aspect_ratio = 16.0/9.0;
  const int   image_width = 1080;
  const int   image_height = (int)(image_width/aspect_ratio);
  const int   samples_per_pixel = 100;
  const int   max_depth = 50;


  //world

  hittable_list world;
  world.add(std::make_shared<sphere>(vec3(0,-100.5,-1),100));
  world.add(std::make_shared<sphere>(vec3(0,0.1,-1),0.5));
 
  //camera

  float viewport_height = 4.0;
  float viewport_width = aspect_ratio * viewport_height;
  float focal_length = 1.0;
      
  vec3 origin(0,0,0);
  vec3 horizontal(viewport_width,0,0);
  vec3 vertical(0,viewport_height,0);
  vec3 lower_left_corner = origin - horizontal/2 - vertical/2 -vec3(0,0,focal_length);
  //In ray tracing, the lower left corner is often used as a reference point or origin for ge   nerating rays that traverse the scene and interact with objects. This corner typically rep   resents the position of the viewer or camera in the virtual scene.
  

  
  
  FILE *fp = fopen("../img/image.ppm","wb");
  (void)fprintf(fp,"P6\n%d %d\n255\n",image_width,image_height);
  static unsigned char color[3];
  for(int i = image_height;i>=0;--i)
    {
      for(int j=0;j<image_width;++j)
	{
	  /*double r = (double)j/image_width -1;
	  double g = (double)i/image_height -1;
	  double b = 0.25;
	  */
	  vec3 pixel_color(0,0,0);

	  for(int s =0;s<samples_per_pixel;++s)
	    {

	      double u = (double)(j+random_double())/(image_width  - 1);
	      double v = (double)(i+random_double())/(image_height - 1);
	      
	      ray r(origin,lower_left_corner + u*horizontal + v*vertical - origin);

	      pixel_color += ray_color(&r,&world,max_depth);
	    }

	  double r = pixel_color.x();
	  double g = pixel_color.y();
	  double b = pixel_color.z();
	  
	  double scale = 1.0/samples_per_pixel;
	  r = sqrt(scale * r);
	  g = sqrt(scale * g);
	  b = sqrt(scale * b);
	  
	      
	  
	  int ir = (int)(255.999 * clamp(r,0.0,0.999));
	  int ig = (int)(255.999 * clamp(g,0.0,0.999));
	  int ib = (int)(255.999 * clamp(b,0.0,0.999));
	      
	  color[0] = ir;
	  color[1] = ig;
	  color[2] = ib;

	  (void)fwrite(color,1,3,fp);
	  clock_t end = clock();
	  double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
	  printf(" time : %f\n",time_spent);
	}
    }
  (void)fclose(fp);

  return 0;
}
